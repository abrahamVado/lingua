<?php

declare(strict_types=1);

use Drupal\Component\Utility\NestedArray;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Form\SubformStateInterface;
use Drupal\file\Entity\File;
use Drupal\file\FileUsage\FileUsageInterface;

/**
 * Implements hook_theme().
 */
function pds_recipe_executives_theme($existing, $type, $theme, $path) {
  return [
    'pds_executives' => [
      'template' => 'pds-executives',
      'path' => $path . '/templates',
      'variables' => [
        'title' => '',
        'section_id' => 'principal-executives',
        'executives' => [],
      ],
    ],
  ];
}

/**
 * AJAX callback to return just the executives_ui container.
 */
function pds_recipe_executives_ajax_events(array &$form, FormStateInterface $form_state) {
  if (isset($form['settings']['executives_ui'])) {
    return $form['settings']['executives_ui'];
  }
  if (isset($form['executives_ui'])) {
    return $form['executives_ui'];
  }
  return $form;
}

/**
 * Persist the selected admin tab between AJAX rebuilds.
 */
function pds_recipe_executives_set_active_tab(FormStateInterface $form_state, string $tab): void {
  //1.- Store the choice on the current form state instance.
  $form_state->set('pds_recipe_executives_active_tab', $tab);

  //2.- Mirror the setting on the parent form state when nested in Layout Builder.
  $parent_state = pds_recipe_executives_parent_state($form_state);
  if ($parent_state) {
    $parent_state->set('pds_recipe_executives_active_tab', $tab);
  }

  //3.- Synchronize the hidden form value so the next rebuild honors the tab choice.
  $form_state->setValue(['executives_ui_active_tab'], $tab);
  $user_input = $form_state->getUserInput();
  if (!is_array($user_input)) {
    $user_input = [];
  }
  $user_input['executives_ui_active_tab'] = $tab;
  $form_state->setUserInput($user_input);

  if ($parent_state) {
    $parent_state->setValue(['executives_ui_active_tab'], $tab);
    $parent_input = $parent_state->getUserInput();
    if (!is_array($parent_input)) {
      $parent_input = [];
    }
    $parent_input['executives_ui_active_tab'] = $tab;
    $parent_state->setUserInput($parent_input);
  }
}

/**
 * Validation for adding a new executive.
 */
function pds_recipe_executives_add_person_validate(array &$form, FormStateInterface $form_state): void {
  $base_key = pds_recipe_executives_base_key($form, $form_state, ['executives_ui', 'panes', 'add_person']);
  $parent_state = pds_recipe_executives_parent_state($form_state);

  //1.- Collect author input from the correct form tree branch.
  $name = trim((string) $form_state->getValue(array_merge($base_key, ['person_name'])));
  $title = trim((string) $form_state->getValue(array_merge($base_key, ['person_title'])));
  $photo = trim((string) $form_state->getValue(array_merge($base_key, ['person_photo'])));
  $photo_upload = $form_state->getValue(array_merge($base_key, ['person_photo_upload']));
  $photo_upload_info = pds_recipe_executives_extract_uploaded_photo($photo_upload);
  $linkedin = trim((string) $form_state->getValue(array_merge($base_key, ['person_linkedin'])));
  $cv = trim((string) $form_state->getValue(array_merge($base_key, ['person_cv'])));

  //2.- Validate minimal requirements for a card.
  if ($name === '') {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_name'])), t('Name is required.'));
  }
  if ($title === '') {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_title'])), t('Title is required.'));
  }

  //3.- Enforce safe URL formats.
  if ($photo_upload_info['error'] !== NULL) {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_photo_upload'])), $photo_upload_info['error']);
  }
  if ($photo_upload_info['url'] !== NULL) {
    $photo = $photo_upload_info['url'];
  }
  if ($photo !== '' && !pds_recipe_executives_is_allowed_url($photo)) {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_photo'])), t('Photo URL must be absolute or start with / or a stream wrapper.'));
  }
  if ($linkedin !== '' && !pds_recipe_executives_is_allowed_url($linkedin)) {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_linkedin'])), t('LinkedIn URL must be absolute or start with /.'));
  }

  if ($form_state->hasAnyErrors()) {
    $form_state->set('pds_recipe_executives_add_person_new_person', NULL);
    if ($parent_state) {
      $parent_state->set('pds_recipe_executives_add_person_new_person', NULL);
    }
    return;
  }

  //4.- Store a clean snapshot for the submit handler.
  $payload = [
    'name' => $name,
    'title' => $title,
    'photo' => $photo,
    'linkedin' => $linkedin,
    'cv_html' => $cv,
  ];

  if ($photo_upload_info['fid'] !== NULL) {
    $payload['photo_file_fid'] = $photo_upload_info['fid'];
  }

  $form_state->set('pds_recipe_executives_add_person_new_person', $payload);
  if ($parent_state) {
    $parent_state->set('pds_recipe_executives_add_person_new_person', $payload);
  }
}

/**
 * Submit handler that appends the validated executive to the working list.
 */
function pds_recipe_executives_add_person_submit(array &$form, FormStateInterface $form_state): void {
  $base_key = pds_recipe_executives_base_key($form, $form_state, ['executives_ui', 'panes', 'add_person']);
  $parent_state = pds_recipe_executives_parent_state($form_state);

  //1.- Retrieve sanitized information prepared by validation.
  $new_person = $form_state->get('pds_recipe_executives_add_person_new_person');
  if (!is_array($new_person)) {
    return;
  }

  pds_recipe_executives_finalize_photo_payload($new_person);

  //2.- Append the new person to the working list stored in form state.
  $people = $form_state->get('working_people');
  if (!is_array($people)) {
    $people = [];
  }
  $people[] = $new_person;
  $normalized_people = array_values($people);

  $form_state->set('working_people', $normalized_people);
  if ($parent_state) {
    $parent_state->set('working_people', $normalized_people);
  }

  //3.- Reset author-facing inputs for the next addition.
  foreach (['person_name', 'person_title', 'person_photo', 'person_linkedin', 'person_cv'] as $key) {
    $form_state->setValue(array_merge($base_key, [$key]), '');
  }
  $form_state->setValue(array_merge($base_key, ['person_photo_upload']), []);
  $user_input = $form_state->getUserInput();
  if (!is_array($user_input)) {
    $user_input = [];
  }
  foreach (['person_name', 'person_title', 'person_photo', 'person_linkedin', 'person_cv'] as $key) {
    NestedArray::setValue($user_input, array_merge($base_key, [$key]), '');
  }
  NestedArray::setValue($user_input, array_merge($base_key, ['person_photo_upload']), []);
  $form_state->setUserInput($user_input);
  if ($parent_state) {
    foreach (['person_name', 'person_title', 'person_photo', 'person_linkedin', 'person_cv'] as $key) {
      $parent_state->setValue(array_merge($base_key, [$key]), '');
    }
    $parent_state->setValue(array_merge($base_key, ['person_photo_upload']), []);
    $parent_input = $parent_state->getUserInput();
    if (!is_array($parent_input)) {
      $parent_input = [];
    }
    foreach (['person_name', 'person_title', 'person_photo', 'person_linkedin', 'person_cv'] as $key) {
      NestedArray::setValue($parent_input, array_merge($base_key, [$key]), '');
    }
    NestedArray::setValue($parent_input, array_merge($base_key, ['person_photo_upload']), []);
    $parent_state->setUserInput($parent_input);
  }

  //4.- Reset checkboxes to avoid stale remove selections.
  $table_key = pds_recipe_executives_base_key($form, $form_state, ['executives_ui', 'panes', 'people_list', 'people']);
  $checkbox_rows = [];
  foreach ($normalized_people as $index => $_row) {
    $checkbox_rows[$index] = ['remove' => 0];
  }
  $form_state->setValue($table_key, $checkbox_rows);
  if ($parent_state) {
    $parent_state->setValue($table_key, $checkbox_rows);
  }

  //5.- Clear temp storage and rebuild to refresh UI.
  $form_state->set('pds_recipe_executives_add_person_new_person', NULL);
  if ($parent_state) {
    $parent_state->set('pds_recipe_executives_add_person_new_person', NULL);
  }
  $form_state->setRebuild(TRUE);
  pds_recipe_executives_set_active_tab($form_state, 'people');
}

/**
 * Remove selected executives from the working snapshot.
 */
function pds_recipe_executives_remove_people_submit(array &$form, FormStateInterface $form_state): void {
  $table_key = pds_recipe_executives_base_key($form, $form_state, ['executives_ui', 'panes', 'people_list', 'people']);
  $parent_state = pds_recipe_executives_parent_state($form_state);

  $people = $form_state->get('working_people');
  if (!is_array($people)) {
    $people = [];
  }

  //1.- Gather checkbox values from processed values or raw input.
  $values = $form_state->getValue($table_key);
  if (!is_array($values) && $parent_state) {
    $values = $parent_state->getValue($table_key);
  }
  if (!is_array($values)) {
    $input = $form_state->getUserInput();
    if (is_array($input)) {
      $raw_values = NestedArray::getValue($input, $table_key);
      if (is_array($raw_values)) {
        $values = $raw_values;
      }
    }
  }
  if (!is_array($values) && $parent_state) {
    $parent_input = $parent_state->getUserInput();
    if (is_array($parent_input)) {
      $raw_values = NestedArray::getValue($parent_input, $table_key);
      if (is_array($raw_values)) {
        $values = $raw_values;
      }
    }
  }
  if (!is_array($values)) {
    $values = [];
  }

  //2.- Filter out rows flagged for removal.
  $kept = [];
  foreach ($people as $index => $person) {
    $should_remove = !empty($values[$index]['remove']);
    if ($should_remove) {
      continue;
    }
    $kept[] = $person;
  }

  $form_state->set('working_people', $kept);
  if ($parent_state) {
    $parent_state->set('working_people', $kept);
  }

  //3.- Reset checkboxes after deletion.
  $reset_rows = [];
  foreach ($kept as $index => $_row) {
    $reset_rows[$index] = ['remove' => 0];
  }
  $form_state->setValue($table_key, $reset_rows);
  if ($parent_state) {
    $parent_state->setValue($table_key, $reset_rows);
  }

  $form_state->setRebuild(TRUE);
  pds_recipe_executives_set_active_tab($form_state, 'people');
}

/**
 * Prepare edit mode for a specific executive row.
 */
function pds_recipe_executives_edit_person_prepare_submit(array &$form, FormStateInterface $form_state): void {
  $trigger = $form_state->getTriggeringElement();
  $index = isset($trigger['#pds_recipe_executives_edit_index']) && is_numeric($trigger['#pds_recipe_executives_edit_index'])
    ? (int) $trigger['#pds_recipe_executives_edit_index']
    : NULL;
  if ($index === NULL) {
    return;
  }

  $parent_state = pds_recipe_executives_parent_state($form_state);
  $form_state->set('pds_recipe_executives_editing_index', $index);
  if ($parent_state) {
    $parent_state->set('pds_recipe_executives_editing_index', $index);
  }

  $form_state->setRebuild(TRUE);
  pds_recipe_executives_set_active_tab($form_state, 'edit');
}

/**
 * Validate updated executive information.
 */
function pds_recipe_executives_edit_person_validate(array &$form, FormStateInterface $form_state): void {
  $base_key = pds_recipe_executives_base_key($form, $form_state, ['executives_ui', 'panes', 'edit_person']);
  $parent_state = pds_recipe_executives_parent_state($form_state);

  $name = trim((string) $form_state->getValue(array_merge($base_key, ['person_name'])));
  $title = trim((string) $form_state->getValue(array_merge($base_key, ['person_title'])));
  $photo = trim((string) $form_state->getValue(array_merge($base_key, ['person_photo'])));
  $photo_upload = $form_state->getValue(array_merge($base_key, ['person_photo_upload']));
  $photo_upload_info = pds_recipe_executives_extract_uploaded_photo($photo_upload);
  $linkedin = trim((string) $form_state->getValue(array_merge($base_key, ['person_linkedin'])));
  $cv = trim((string) $form_state->getValue(array_merge($base_key, ['person_cv'])));

  if ($name === '') {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_name'])), t('Name is required.'));
  }
  if ($title === '') {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_title'])), t('Title is required.'));
  }
  if ($photo_upload_info['error'] !== NULL) {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_photo_upload'])), $photo_upload_info['error']);
  }
  if ($photo_upload_info['url'] !== NULL) {
    $photo = $photo_upload_info['url'];
  }
  if ($photo !== '' && !pds_recipe_executives_is_allowed_url($photo)) {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_photo'])), t('Photo URL must be absolute or start with / or a stream wrapper.'));
  }
  if ($linkedin !== '' && !pds_recipe_executives_is_allowed_url($linkedin)) {
    $form_state->setErrorByName(implode('][', array_merge($base_key, ['person_linkedin'])), t('LinkedIn URL must be absolute or start with /.'));
  }

  if ($form_state->hasAnyErrors()) {
    $form_state->set('pds_recipe_executives_edit_person_payload', NULL);
    if ($parent_state) {
      $parent_state->set('pds_recipe_executives_edit_person_payload', NULL);
    }
    return;
  }

  $payload = [
    'name' => $name,
    'title' => $title,
    'photo' => $photo,
    'linkedin' => $linkedin,
    'cv_html' => $cv,
  ];

  if ($photo_upload_info['fid'] !== NULL) {
    $payload['photo_file_fid'] = $photo_upload_info['fid'];
  }

  $form_state->set('pds_recipe_executives_edit_person_payload', $payload);
  if ($parent_state) {
    $parent_state->set('pds_recipe_executives_edit_person_payload', $payload);
  }
}

/**
 * Save the edited executive back into the working list.
 */
function pds_recipe_executives_edit_person_submit(array &$form, FormStateInterface $form_state): void {
  $parent_state = pds_recipe_executives_parent_state($form_state);
  $updated_person = $form_state->get('pds_recipe_executives_edit_person_payload');
  if (!is_array($updated_person)) {
    return;
  }

  pds_recipe_executives_finalize_photo_payload($updated_person);

  $index = $form_state->get('pds_recipe_executives_editing_index');
  if ($index === NULL && $parent_state) {
    $index = $parent_state->get('pds_recipe_executives_editing_index');
  }
  if (!is_numeric($index)) {
    return;
  }
  $index = (int) $index;

  $people = $form_state->get('working_people');
  if (!is_array($people)) {
    $people = [];
  }

  if (!isset($people[$index])) {
    return;
  }

  $people[$index] = $updated_person;
  $normalized_people = array_values($people);

  $form_state->set('working_people', $normalized_people);
  $form_state->set('pds_recipe_executives_editing_index', NULL);
  $form_state->set('pds_recipe_executives_edit_person_payload', NULL);

  if ($parent_state) {
    $parent_state->set('working_people', $normalized_people);
    $parent_state->set('pds_recipe_executives_editing_index', NULL);
    $parent_state->set('pds_recipe_executives_edit_person_payload', NULL);
  }

  $form_state->setRebuild(TRUE);
  pds_recipe_executives_set_active_tab($form_state, 'people');
}

/**
 * Cancel edit mode and go back to the list tab.
 */
function pds_recipe_executives_edit_person_cancel_submit(array &$form, FormStateInterface $form_state): void {
  $parent_state = pds_recipe_executives_parent_state($form_state);
  $form_state->set('pds_recipe_executives_editing_index', NULL);
  $form_state->set('pds_recipe_executives_edit_person_payload', NULL);
  if ($parent_state) {
    $parent_state->set('pds_recipe_executives_editing_index', NULL);
    $parent_state->set('pds_recipe_executives_edit_person_payload', NULL);
  }
  $form_state->setRebuild(TRUE);
  pds_recipe_executives_set_active_tab($form_state, 'people');
}

/**
 * Helper: determine the base form key for nested structures.
 */
function pds_recipe_executives_base_key(array &$form, FormStateInterface $form_state, array $segments): array {
  $trigger = $form_state->getTriggeringElement();
  $parents = is_array($trigger['#parents'] ?? NULL) ? $trigger['#parents'] : [];
  if (in_array('settings', $parents, TRUE) || isset($form['settings'])) {
    array_unshift($segments, 'settings');
  }
  return $segments;
}

/**
 * Helper: locate the parent form state when inside a SubformState.
 */
function pds_recipe_executives_parent_state(FormStateInterface $form_state): ?FormStateInterface {
  if ($form_state instanceof SubformStateInterface && method_exists($form_state, 'getCompleteFormState')) {
    $parent = $form_state->getCompleteFormState();
    if ($parent instanceof FormStateInterface) {
      return $parent;
    }
  }
  return NULL;
}

/**
 * Helper: determine if an URL is safe for configuration.
 */
function pds_recipe_executives_is_allowed_url(string $url): bool {
  if ($url === '') {
    return TRUE;
  }
  if (UrlHelper::isValid($url, TRUE) || UrlHelper::isValid($url, FALSE)) {
    return TRUE;
  }
  return strpos($url, '/') === 0;
}

/**
 * Extract the managed file selection from the photo upload widget.
 */
function pds_recipe_executives_extract_uploaded_photo($value): array {
  //1.- Provide a predictable response structure for callers.
  $result = [
    'url' => NULL,
    'fid' => NULL,
    'error' => NULL,
  ];

  //2.- Normalize managed_file values into a single numeric fid.
  if (!is_array($value)) {
    return $result;
  }
  $candidates = array_filter($value, static function ($candidate): bool {
    return is_numeric($candidate) && (int) $candidate > 0;
  });
  if ($candidates === []) {
    return $result;
  }
  $fid = (int) reset($candidates);
  if ($fid <= 0) {
    return $result;
  }

  //3.- Load the file and derive the public URL used by the rendered card.
  $file = File::load($fid);
  if (!$file) {
    $result['error'] = t('Unable to load the uploaded photo.');
    return $result;
  }
  $url = pds_recipe_executives_build_file_url($file);
  if ($url === NULL) {
    $result['error'] = t('Unable to generate a URL for the uploaded photo.');
    return $result;
  }

  $result['fid'] = $fid;
  $result['url'] = $url;
  return $result;
}

/**
 * Build a relative URL for a managed file.
 */
function pds_recipe_executives_build_file_url(File $file): ?string {
  //1.- Convert the stream wrapper URI into an absolute URL.
  $generator = \Drupal::service('file_url_generator');
  $absolute = $generator->generateAbsoluteString($file->getFileUri());
  if (!is_string($absolute) || $absolute === '') {
    return NULL;
  }

  //2.- Normalize to a relative path so configuration stays environment agnostic.
  $relative = file_url_transform_relative($absolute);
  if (!is_string($relative) || $relative === '') {
    return NULL;
  }

  return $relative;
}

/**
 * Mark uploaded files as permanent once the person payload is stored.
 */
function pds_recipe_executives_finalize_photo_payload(array &$person): void {
  if (!isset($person['photo_file_fid'])) {
    return;
  }

  //1.- Capture and immediately unset the helper key so the snapshot mirrors production data.
  $fid = (int) $person['photo_file_fid'];
  unset($person['photo_file_fid']);
  if ($fid <= 0) {
    return;
  }

  //2.- Promote the temporary file to permanent storage.
  $file = File::load($fid);
  if (!$file) {
    return;
  }
  if ($file->isTemporary()) {
    $file->setPermanent();
    $file->save();
  }

  //3.- Register usage so Drupal keeps the asset available for the block configuration.
  if (\Drupal::hasService('file.usage')) {
    $usage = \Drupal::service('file.usage');
    if ($usage instanceof FileUsageInterface) {
      $usage->add($file, 'pds_recipe_executives', 'pds_executives_photo', $file->id());
    }
  }
}
