<?php

use Drupal\pds_recipe_template\Service\RowImagePromoter;
use Drupal\pds_recipe_template\Service\TemplateGroupManager;

/**
 * @file
 * Hooks for pds_recipe_template.
 */

use Composer\Autoload\ClassLoader;

//1.- Ensure the module's namespace is registered on Composer's primary loader
//    so services stay discoverable even when Composer runs with an authoritative
//    class map and skips dynamic file discovery.
static $pdsRecipeTemplateAutoloaderRegistered = FALSE;
if (!$pdsRecipeTemplateAutoloaderRegistered) {
  //2.- Inspect the registered autoload callbacks to locate the Composer loader
  //    instance that Drupal bootstraps with; this keeps the solution consistent
  //    with Drupal's dependency injection and avoids manual file includes.
  $composerLoader = NULL;
  foreach (spl_autoload_functions() as $autoloadCallback) {
    if (is_array($autoloadCallback) && $autoloadCallback[0] instanceof ClassLoader) {
      $composerLoader = $autoloadCallback[0];
      break;
    }
    if ($autoloadCallback instanceof ClassLoader) {
      $composerLoader = $autoloadCallback;
      break;
    }
  }

  //3.- Once the loader is available, register the module's PSR-4 prefix pointing
  //    at the src directory so Composer resolves classes instead of falling back
  //    to brittle require statements.
  if ($composerLoader instanceof ClassLoader) {
    $composerLoader->addPsr4('Drupal\\pds_recipe_template\\', __DIR__ . '/src');
    $pdsRecipeTemplateAutoloaderRegistered = TRUE;
  }
}

/**
 * Implements hook_theme().
 *
 * Registers the theme hook `pds_template_block`.
 * Maps it to templates/pds-template-block.html.twig.
 */
function pds_recipe_template_theme($existing, $type, $theme, $path) {
  return [
    'pds_template_block' => [
      'template' => 'pds-template', // looks for pds-template-block.html.twig
      'path' => $path . '/templates',
      'variables' => [
        'items' => [],
        'group_id' => NULL,
        'instance_uuid' => '',
      ],
    ],
  ];
}
