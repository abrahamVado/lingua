<?php

/**
 * @file
 * Hooks for pds_recipe_template.
 */

/**
 * Implements hook_theme().
 *
 * Registers the theme hook `pds_template_block`.
 * Maps it to templates/pds-template-block.html.twig.
 */
function pds_recipe_template_theme($existing, $type, $theme, $path) {
  return [
    'pds_template_block' => [
      'template' => 'pds-template', // looks for pds-template-block.html.twig
      'path' => $path . '/templates',
      'variables' => [
        'items' => [],
        'group_id' => NULL,
        'instance_uuid' => '',
      ],
    ],
  ];
}

/**
 * Ensure a template group exists for the provided UUID and return its id.
 */
function pds_recipe_template_ensure_group_and_get_id(string $uuid, string $type = 'pds_recipe_template'): ?int {
  //1.- Reject empty UUIDs immediately so no database work happens without an identifier.
  if ($uuid === '') {
    return NULL;
  }

  $normalized_type = $type !== '' ? $type : 'pds_recipe_template';

  try {
    //2.- Attempt to reuse an existing active group row for this UUID.
    $connection = \Drupal::database();
    $existing_id = $connection->select('pds_template_group', 'g')
      ->fields('g', ['id'])
      ->condition('g.uuid', $uuid)
      ->condition('g.deleted_at', NULL, 'IS NULL')
      ->execute()
      ->fetchField();

    if ($existing_id) {
      return (int) $existing_id;
    }

    $now = \Drupal::time()->getRequestTime();

    try {
      //3.- Insert a fresh group row when the UUID has never been persisted before.
      $connection->insert('pds_template_group')
        ->fields([
          'uuid' => $uuid,
          'type' => $normalized_type,
          'created_at' => $now,
          'deleted_at' => NULL,
        ])
        ->execute();
    }
    catch (\Throwable $insert_exception) {
      //4.- Ignore duplicate key races because concurrent requests may create it too.
    }

    //5.- Resolve the identifier again to cover both inserts and duplicates gracefully.
    $new_id = $connection->select('pds_template_group', 'g')
      ->fields('g', ['id'])
      ->condition('g.uuid', $uuid)
      ->condition('g.deleted_at', NULL, 'IS NULL')
      ->execute()
      ->fetchField();

    return $new_id ? (int) $new_id : NULL;
  }
  catch (\Throwable $exception) {
    //6.- Fail softly so callers can fall back to configuration snapshots when DB errors appear.
    return NULL;
  }
}
