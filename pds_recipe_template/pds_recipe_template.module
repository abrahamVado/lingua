<?php

/**
 * @file
 * Hooks and runtime helpers for pds_recipe_template.
 */

use Drupal\Core\Session\AccountInterface;
use Drupal\pds_recipe_template\Service\RowImagePromoter;
use Drupal\pds_recipe_template\Service\LegacySchemaRepairer;

/**
 * Permission gate used by AJAX routes (create/update/list/ensure-group).
 * WHY: Keep permissive to match Layout Builder editors.
 */
if (!function_exists('pds_recipe_template_user_can_manage_template')) {
  function pds_recipe_template_user_can_manage_template(?AccountInterface $account = NULL): bool {
    $account = $account ?: \Drupal::currentUser();
    if (!$account) {
      return FALSE;
    }

    // Mirrors typical Layout Builder / blocks editor capabilities.
    $perms = [
      'administer blocks',
      'administer layout builder',
      'configure any layout',
      'configure own layout',
      'configure all layout overrides',
      'configure editable layout overrides',
    ];
    foreach ($perms as $perm) {
      if ($account->hasPermission($perm)) {
        return TRUE;
      }
    }
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function pds_recipe_template_theme($existing, $type, $theme, $path) {
  return [
    'pds_template_block' => [
      'template' => 'pds-template', // templates/pds-template-block.html.twig
      'path' => $path . '/templates',
      'variables' => [
        'items' => [],
        'group_id' => NULL,   // int|null
        'instance_id' => 0,   // int. Replaces legacy instance_uuid.
      ],
    ],
  ];
}

/**
 * Ensure group by numeric ID.
 *
 * INPUT: $id > 0, $type machine name.
 * WHY: Use primary key, avoid UUID lookups.
 * OUTPUT: Numeric group id or 0 on failure.
 */
function pds_recipe_template_ensure_group_and_get_id(string $uuid, string $type = 'pds_recipe_template'): int {
  /** @var \Drupal\pds_recipe_template\Service\GroupEnsurer $ensurer */
  $ensurer = \Drupal::service('pds_recipe_template.template_group_manager');
  //1.- Delegate to the service which handles insert-or-select by UUID.
  return (int) $ensurer->ensureGroupAndGetId($uuid, $type);
}

/**
 * Resolve the RowImagePromoter for AJAX row create/update flows.
 * WHY: Avoid hard DI during early bootstrap.
 */
if (!function_exists('pds_recipe_template_resolve_row_image_promoter')) {
  function pds_recipe_template_resolve_row_image_promoter(): RowImagePromoter {
    try {
      /** @var \Drupal\pds_recipe_template\Service\RowImagePromoter $svc */
      return \Drupal::service('pds_recipe_template.row_image_promoter');
    }
    catch (\Throwable $e) {
      // Minimal, safe fallback so the editor keeps working even if container is unhappy.
      $etm = \Drupal::service('entity_type.manager');
      $urlGen = \Drupal::service('file_url_generator');
      return new RowImagePromoter($etm, $urlGen);
    }
  }
}

/**
 * Resolve the LegacySchemaRepairer for install/repair-time checks.
 *
 * WHY: Self-heal tables at runtime without hard coupling to container config.
 * NOTE: UUID dependency removed. Add it back only if you still translate legacy UUIDâ†’ID.
 */
if (!function_exists('pds_recipe_template_resolve_schema_repairer')) {
  function pds_recipe_template_resolve_schema_repairer(): LegacySchemaRepairer {
    try {
      /** @var \Drupal\pds_recipe_template\Service\LegacySchemaRepairer $svc */
      return \Drupal::service('pds_recipe_template.legacy_schema_repairer');
    }
    catch (\Throwable $e) {
      // Safe direct construction fallback.
      $db   = \Drupal::database();
      $time = \Drupal::time();
      $loggerFactory = \Drupal::service('logger.factory');
      // Constructor now: (Connection, TimeInterface, LoggerChannelFactoryInterface)
      return new LegacySchemaRepairer($db, $time, $loggerFactory);
    }
  }
}
