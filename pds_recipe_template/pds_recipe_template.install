<?php

/**
 * @file
 * Install file for pds_recipe_template (cleaned: new installs only).
 *
 * WHAT'S INCLUDED
 * - hook_schema(): creates the two runtime tables only.
 *
 * WHAT'S REMOVED
 * - All legacy update hooks (9001, 9002, 9003) to keep this file minimal.
 *
 * NOTES
 * - If you later need to migrate legacy data, reintroduce update hooks in a
 *   separate release. For fresh sites, this file is sufficient.
 */

/**
 * Implements hook_schema().
 *
 * Creates the master "group" table and the child "item" table.
 * Both tables are designed for soft-deletes using deleted_at (NULL = active).
 */
function pds_recipe_template_schema() {
  $schema = [];

  // --------------------------------------------------------------------------
  // 1) MASTER TABLE: pds_template_group
  // Purpose: one row per rendered component instance (logical group).
  // --------------------------------------------------------------------------
  $schema['pds_template_group'] = [
    'description' => 'Logical group of template items (one rendered component instance).',
    'fields' => [
      // 1.1) Surrogate PK for fast joins.
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
      ],
      // 1.2) Stable logical identifier used by AJAX endpoints and config.
      'uuid' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      // 1.3) Recipe type discriminator (enables multi-recipe reuse of endpoints).
      'type' => [
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ],
      // 1.4) Creation timestamp (unix).
      'created_at' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      // 1.5) Soft-delete timestamp; NULL means active.
      'deleted_at' => [
        'type' => 'int',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      // Enforce one row per instance UUID.
      'uuid' => ['uuid'],
    ],
    'indexes' => [
      // Typical filters: by recipe type and/or active rows.
      'type' => ['type'],
      'deleted_at' => ['deleted_at'],
    ],
  ];

  // --------------------------------------------------------------------------
  // 2) CHILD TABLE: pds_template_item
  // Purpose: cards/items that belong to a group; ordered by "weight".
  // --------------------------------------------------------------------------
  $schema['pds_template_item'] = [
    'description' => 'Items/cards that belong to a template group.',
    'fields' => [
      // 2.1) Surrogate PK for internal references.
      'id' => [
        'type' => 'serial',
        'not null' => TRUE,
      ],
      // 2.2) Stable logical identifier for each item.
      'uuid' => [
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ],
      // 2.3) FK to group.id (no explicit constraint for portability).
      'group_id' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      // 2.4) Sort order within the group.
      'weight' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      // 2.5) Content fields (header required; subheader optional).
      'header' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'subheader' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ],
      'description' => [
        'type' => 'text',
        'size' => 'big',
        'not null' => FALSE,
      ],
      // 2.6) Link target (URL string).
      'url' => [
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
        'default' => '',
      ],
      // 2.7) Media URLs (desktop/mobile); callers can mirror values if needed.
      'desktop_img' => [
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
        'default' => '',
      ],
      'mobile_img' => [
        'type' => 'varchar',
        'length' => 512,
        'not null' => TRUE,
        'default' => '',
      ],
      // 2.8) Optional geolocation.
      'latitud' => [
        'type' => 'float',
        'not null' => FALSE,
      ],
      'longitud' => [
        'type' => 'float',
        'not null' => FALSE,
      ],
      // 2.9) Timestamps + soft delete.
      'created_at' => [
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ],
      'deleted_at' => [
        'type' => 'int',
        'not null' => FALSE,
      ],
    ],
    'primary key' => ['id'],
    'unique keys' => [
      // Avoid duplicate logical items.
      'uuid' => ['uuid'],
    ],
    'indexes' => [
      // Composite index matching the hot path:
      // SELECT ... WHERE group_id = ? AND deleted_at IS NULL ORDER BY weight;
      'grp_del_w' => ['group_id', 'deleted_at', 'weight'],
    ],
  ];

  return $schema;
}
