<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\pds_recipe_slider_banner\Plugin\Block\PdsSliderBannerBlock;

/**
 * AJAX callback. Re-render the full wrapper.
 */
function pds_recipe_slider_banner_ajax_slides(array $form, FormStateInterface $form_state) {
  // Layout Builder wraps block config under ['settings'].
  return $form['settings']['slides_ui'] ?? $form['slides_ui'];
}

/**
 * Internal helper.
 * Read the "Manage existing slides" table submission and rebuild full slide data.
 *
 * We stored all data for each slide in hidden fields in the table row.
 * We use that to recreate the working snapshot.
 */
function _pds_recipe_slider_banner_get_submitted_list(FormStateInterface $form_state): array {
  // Get the complete form_state to avoid SubformState getParents fatal.
  $complete = $form_state;
  if (method_exists($form_state, 'getCompleteFormState')) {
    $maybe_parent = $form_state->getCompleteFormState();
    if ($maybe_parent instanceof FormStateInterface) {
      $complete = $maybe_parent;
    }
  }

  // Try both plain block form and Layout Builder "settings[...]"
  $list_rows = $complete->getValue(['slides_ui', 'tab_manage', 'list']);
  if (!is_array($list_rows)) {
    $list_rows = $complete->getValue(['settings', 'slides_ui', 'tab_manage', 'list']);
  }
  if (!is_array($list_rows)) {
    $list_rows = [];
  }

  $slides = [];

  foreach ($list_rows as $row_id => $row) {
    if (!is_array($row)) {
      continue;
    }

    $rid = $row['row_id'] ?? $row_id;
    if (!$rid) {
      $rid = PdsSliderBannerBlock::makeRowId();
    }

    $slides[] = [
      'row_id'            => $rid,
      'image_desktop_fid' => $row['image_desktop_fid'] ?? [],
      'image_mobile_fid'  => $row['image_mobile_fid'] ?? [],
      'alt'               => $row['alt_hidden'] ?? '',
      'title_html'        => $row['title_html_hidden'] ?? '',
      'intro'             => $row['intro_hidden'] ?? '',
      'cta_label'         => $row['cta_label_hidden'] ?? '',
      'cta_url'           => $row['cta_url_hidden'] ?? '',
      'remove'            => !empty($row['remove']) ? 1 : 0,
    ];
  }

  // make sure each row has row_id
  return PdsSliderBannerBlock::addRowIds($slides);
}

/**
 * Submit handler for "Add this slide".
 *
 * 1. Load existing snapshot from table (tab_manage list)
 * 2. Read new values from tab_add
 * 3. Append
 * 4. Store snapshot and rebuild AJAX
 */
function pds_recipe_slider_banner_add_slide_submit(array &$form, FormStateInterface $form_state) {
  // Current slides from the manage tab.
  $current_slides = _pds_recipe_slider_banner_get_submitted_list($form_state);

  // To read tab_add we again use complete form_state
  $complete = $form_state;
  if (method_exists($form_state, 'getCompleteFormState')) {
    $maybe_parent = $form_state->getCompleteFormState();
    if ($maybe_parent instanceof FormStateInterface) {
      $complete = $maybe_parent;
    }
  }

  $new_vals = $complete->getValue(['slides_ui', 'tab_add']);
  if (!is_array($new_vals)) {
    $new_vals = $complete->getValue(['settings', 'slides_ui', 'tab_add']);
  }
  if (!is_array($new_vals)) {
    $new_vals = [];
  }

  // Normalize fids to arrays because we store them that way in snapshot
  $desktop_arr = [];
  if (!empty($new_vals['image_desktop_fid'][0])) {
    $desktop_arr = [(int) $new_vals['image_desktop_fid'][0]];
  }

  $mobile_arr = [];
  if (!empty($new_vals['image_mobile_fid'][0])) {
    $mobile_arr = [(int) $new_vals['image_mobile_fid'][0]];
  }

  $current_slides[] = [
    'row_id'            => PdsSliderBannerBlock::makeRowId(),
    'image_desktop_fid' => $desktop_arr,
    'image_mobile_fid'  => $mobile_arr,
    'alt'               => $new_vals['alt'] ?? '',
    'title_html'        => $new_vals['title_html'] ?? '',
    'intro'             => $new_vals['intro'] ?? '',
    'cta_label'         => $new_vals['cta_label'] ?? '',
    'cta_url'           => $new_vals['cta_url'] ?? '',
    'remove'            => 0,
  ];

  // Write snapshot back so blockForm() sees updated list on rebuild
  PdsSliderBannerBlock::storeSnapshot($form_state, $current_slides);

  // Trigger AJAX rebuild
  $form_state->setRebuild(TRUE);
}

/**
 * Submit handler for "Remove selected".
 *
 * 1. Load submitted list
 * 2. Filter out rows where checkbox remove=1
 * 3. Store back
 * 4. Rebuild
 */
function pds_recipe_slider_banner_remove_selected_submit(array &$form, FormStateInterface $form_state) {
  $current_slides = _pds_recipe_slider_banner_get_submitted_list($form_state);

  $kept = [];
  foreach ($current_slides as $row) {
    if (empty($row['remove'])) {
      $kept[] = $row;
    }
  }

  PdsSliderBannerBlock::storeSnapshot($form_state, $kept);

  $form_state->setRebuild(TRUE);
}
